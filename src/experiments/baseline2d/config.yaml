
# Experiment Setup, Logging Specifications, Environment
experiment:
  description: |
    > 0001b has new training set with consistent test settings.
    > Experiment: Baseline, 1 RGB frame, 1 pos (Orig hg) - 512x512, sgd
  id: "0001b_1rgb-sgd"
  name: 'baseline2d_unet'
  project: 'arena_detection'
  debug:                                            # (Correct Alignment)
    mode: False                                     # < Check
    wandb: False                                     # < Check
    save: False                                      # < Check
    break_train_iter: True                         # < Check
    break_test_iter: False                          # < Check
    batch: 1
    loss: 0
    metrics: 1
    stats: 2
    visualize: 1
    visualize_vals:
      visualize_test: False
      num_exs_per_batch: 5
    test_every_n_epochs: 1
  # debug:  # Fit mini-batch settings
  #   mode: True  # <!CHANGE
  #   wandb: False
  #   save: False 
  #   break_train_iter: True
  #   break_test_iter: True
  #   batch: 1
  #   loss: 0
  #   metrics: 1
  #   stats: 2
  #   visualize: 1
  #   visualize_vals:
  #     visualize_test: False
  #     num_exs_per_batch: 2
  #   test_every_n_epochs: 10
  seed: 310
  iter_print_interval: 100


# Experiment Global Data Specifications (defines what an example is)
data:  # describing project-wide data specifications
  name: knee_cartilage
  knee_cartilage:
    classnames: ['b','ub','uc','lc',lb] # ['a', 'd', 'c']
    examples:
      stack_size: 1


# Results, Metric Specifications (what predictions count as right or wrong?)
results:
  use: False


# Training Specifications
train:
  batch_size: 4   # <!CHANGE
  shuffle: True
  start_epoch: 1
  epochs: 40
  
  optimizer:
    name: 'sgd'  # sgd, nesterov, adam
    lr: .00008
    momentum: 0.9
    wt_decay: 0.0001
    adam:
      betas: [0.9, 0.999]
    
  scheduler:
    name: 'step'
    factor: 0.1
    plateau:
      patience: 10
    step:
      steps: [0.25, 0.65]

  input: [384,384]
  transforms:  [ # resize (req for batch creation!): even dims
    ['crop', [[0.6,1],[0.6,1]]],  # size or ratio
    ['resize', 384],
    ['gaussianblur', [0,1]],
    ['togray', False],
    ['hflip', 0.5],
    ['vflip', 0],
    ['gamma', 0],
    ['bcsh.jitter', [0.4, 0.25, 20, 0]], 
    ['rtss.affine', [0, 0, 0, 0]],
    ['totensor', True],
    ['normmeanstd', [[0.15001505461961784], [0.10547640998002673]]],
  ]


# Testing Specifications
test:
  batch_size: 4 # 200
  transforms:  [ # resize (req for batch creation!): even dims
    ['resize', 384],
    ['totensor', True],
    ['normmeanstd', [[0.15001505461961784], [0.10547640998002673]]],
  ]


# Model / Criterion / Other nn.Module Specifications
model:
  name: 'unet2d'

  unet2d:
    bilinear: True

criterion:
  name: 'pixelwise_bce_2d'
    
  